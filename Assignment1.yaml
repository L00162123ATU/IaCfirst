---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  IaC Assignment1 Create Cloud formation stack for a small business mini network

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCCIDR
      - 
        Label: 
          default: "Tags"
        Parameters: 
          - ProjectName
          - ProjectID
          - ResourceName   

Parameters:
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
      - 10.0.0.0/16
      - 10.0.0.0/24
    Description: Enter VPC CIDR

  ProjectName:
    Type: String
    Description: Enter project name
  
  ProjectID:
    Type: String
    Description: Enter project ID

  ResourceName:
    Type: String
    Description: Enter Resource name

Resources:
 #VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : !Ref ResourceName  
  # public subnet for J instance
  PublicSubnet1:  
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC 
      AvailabilityZone: us-east-1a 
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : PublicSubnet1
  # private subnet for F instance    
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1a 
      CidrBlock: 10.0.1.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : PrivateSubnet1
  # security group for F instance
  SecurityGroupPrivate1:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow traffic to J
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/24
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/24 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.1.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPrivate1
      VpcId: !Ref MyVPC 
  # F instance
  ec2InstanceF:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08c40ec9ead489470
      KeyName: DemoCloudForm
      SecurityGroupIds: [!Ref SecurityGroupPrivate1]
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPrivate1
        - Key : Name
          Value : Instance F           
  # private subnet for A instance
  PrivateSubnet2:  
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : PrivateSubnet2   
  # A instance
  ec2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0753877c9c4e0fdda
      KeyName: DemoCloudForm
      SecurityGroupIds: [!Ref SecurityGroupPrivate2]
      SubnetId: !Ref PrivateSubnet2
      Tags:
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPrivate2   
        - Key : Name
          Value : instance A
# route table for instance A
  RouteTableInstA:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : RouteTableInstA
      VpcId: !Ref MyVPC
  #  route for NATGat 
  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTableInstA
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTableInstA
      SubnetId: !Ref PrivateSubnet2
# NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      Tags:
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : NATGateway
        - Key : Name
          Value: NATGAtewayA
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # security group for A instance
  SecurityGroupPrivate2:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow traffic to A
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/24
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/24 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.4.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPrivate1
      VpcId: !Ref MyVPC        
# private subnet for D instance
  PrivateSubnet3:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b 
      CidrBlock: 10.0.3.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : PrivateSubnet3 
# private subnet for D instance 
  PrivateSubnet4:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1c 
      CidrBlock: 10.0.4.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : PrivateSubnet4 
# D instance (database)
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref DBSubnet
      DBInstanceIdentifier: DemoDB
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: sa
      MasterUserPassword: "12345678"
      Tags:
        - Key: Name
          Value: D
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  # Database subnet group
  DBSubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: DemoDBSubnetGroup
      DBSubnetGroupDescription: DemoDBSubnetGroup
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      Tags:
        - Key: Name
          Value: DemoDBSubnetGroup
  # D instance security group
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupName: DemoDBSesurityGroup
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: DemoDBSesurityGroup
 # internet Gateway
  InternetG:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : InternetGateway
  # Gateway attachment
  MyVPCGatewayattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetG
      VpcId: !Ref MyVPC
  # route table 
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : RouteTable
      VpcId: !Ref MyVPC
  # public route for 
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayattachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetG
      RouteTableId: !Ref RouteTable
  # public subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1
  # security group for public
  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
# allowing traffic to F
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.1.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.0/24
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24
 # allowing traffic to A         
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.2.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.2.0/24
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.2.0/24
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPublic
      VpcId: !Ref MyVPC 
# J instance
  ec2InstanceJ:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08c40ec9ead489470
      KeyName: DemoCloudForm
      SecurityGroupIds: [!Ref SecurityGroupPublic]
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPublic
        - Key : Name
          Value : Instance J    
# Network Acl   
  NACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key : Project Name
          Value : !Ref ProjectName
        - Key : Project ID
          Value : !Ref ProjectID
        - Key : Resource Name
          Value : SecurityGroupPublic
      VpcId: !Ref MyVPC 
  
  NACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId: !Ref NACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  NACLExit:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: True
      NetworkAclId: !Ref NACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200











     
